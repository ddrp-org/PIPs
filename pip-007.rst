PIP-7: Records
======================

.. contents:: Table of Contents
   :local:

Overview
########

DDRP's "global view" property allows applications to query and organize the data stored on the network however they see fit. Rather than posting content to a central server, users would instead write content to their DDRP blobs. In turn, client applications would read each blob and display the content contained therein according to the consumer's preferences.

To make sense of the content, we store them as list of records inside a blob. A record is a pre-formatted message that contains data as specified by a record type. This PIP defines a standard "record envelope" that encodes common metadata about them.

Record Envelopes
################

All records are encased in an envelope structure that encodes common
metadata about them. Envelopes are structured as follows:

#. ``envelope_len``: ``Uvarint``
#. ``record_type``: ``[8]byte``
#. ``subdomain``: ``[32]byte``
#. ``timestamp``: ``time.Time``
#. ``record``: ``[N]byte``

The ``envelope_len`` field represents the byte length of the envelope on the
wire. This field MAY be longer than actual contents of the envelope - that is,
clients MAY encode additional data at the end of the envelope that is not part
of either the ``envelope`` structure or the ``record``. This allows all record
types to be extended easily in the future.

The ``record_type`` field represents the type of the record contained in the
envelope. By convention, ``record_type`` is a compound fields consisting of
the following components:

#. ``record_type_id``: ``[3]byte``
#. ``record_version``: ``uint8``
#. ``record_subtype``: ``[4]byte``

This is done to allow application developers to define their own
record types and extend DDRP social functionality as they see fit. Client MUST
support parsing records that are well-formed but with unknown record types.

See `PIP-9`_ for social records supporting different social networking use cases.

The ``subdomain`` field represents the name of the subdomain partition. The record is intended for the tld when leave blank. See `PIP-8`_ for more details.

The ``timestamp`` field represents the creation time of this record, and is also used as a unique identifier for a record of any types. It is RECOMMENDED that applications ignore different record types with same timestamp. For example, let's say that a blob contained a ``PST`` record with timestamp ``1592628171`` in the past, any subsequent records with the timestamp ``1592628171`` but record types other than ``PST`` SHOULD be ignored by the consumer. If an application come accross the same timestamp and the same type, it SHOULD treat the record from the most recent blob updates as the most updated record.

The ``record`` field represents the wire-encoded record itself.


Referencing a record using a link
*********************************

We serialize ``tld``, ``subdomain``, ``timestamp`` to reference the record across the protocol.

DDRP link to a record can be represented as ``ddrp://subdomain.tld/timstamp``

Authors
#######

- `Matthew Slipper`_

.. _PIP-8: ./pip-008.rst
.. _PIP-9: ./pip-009.rst
.. _Matthew Slipper: https://www.matthewslipper.com
